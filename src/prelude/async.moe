def derive = exports.derive
def OBSTRUCTIVE_SCHEMATA_M = moert.runtime.OBSTRUCTIVE_SCHEMATA_M
def OWNS = moert.runtime.OWNS
def Object = exports.Object
def global = moert.runtime.M_TOP

def export(n)(x) = 
	exports[n] = x
	x

def asyncSchemata = derive OBSTRUCTIVE_SCHEMATA_M

def export('async') async(M) = 
	if(M.build)
		(=> (do g)()) where g = M.build asyncSchemata
	else => do M

def export('join') join(o, callback) = 
	var nActivities = 0
	var nDone = 0
	var res = {}

	def checkContinue(term)(val):
		res[term] = val
		nDone += 1
		if(nDone >= nActivities) callback res

	var keys = Object.keys o
	if(not keys.length) callback res
	nActivities = keys.length

	keys.forEach (term) =>
		res[term] = undefined
		o[term].call null, checkContinue(term)

def export('sleep') sleep(dt, callback) = 
	global.setTimeout(callback, dt)