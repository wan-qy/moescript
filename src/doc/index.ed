::document{moescript}

**Moe is a new, not-very-little Javascript-targeted language written in JavaScript.** Its features are inspired by Haskell, Python and Coffee. It is aimed to deal with common troubles in JavaScript development. Moe has neatly crafted grammar so that most JavaScript development will be simplified.

This document is an introduction of Moescript in examples. You can try Moescript online \@{webtest/index.html}{Here}.

You can get it from \githubProject.
:section{Install}
	:show
		|pre
			> npm install moe -g
	:comm
		Because moescript has a runtime, you may need to install the `moe` locally in your project by `npm install moe`.
:section{Usage}
	:show
		|pre
			> moec <options> input.moe
	:comm
		This is the Moescript compiler `moec`.

		Options:

		 - `-o <value>`, `--output <value>`: Specify the path of output file. If it is not specified, `moec` will print generated code into STDOUT.
		 - `-t <value>`, `--target <value>`: Specify the compilation target which affects global variable list. `-t least` will provide `require`,`module` and `exports` only for globals. `-t node` will provide all Node global variables.
		 - `-g <value>`, `--global <value>`: Specify a global variable, e.g. `-g document`.
		 - `-m <name>=<path>`, `--module <name>=<path>`: Map a module into a global variable, for exmaple, `-m exp=express` will map `require('express')` into the global variablr `exp` inside Moe source.

	:show
		|pre
			> moei source.moe
	:comm
		Instantly runs a Moe module.
		
		- Acts like `node source.js`.
		- Uses `moe/dummy` internally.
		- Requires ability to `require('moe')`.

	:show
		|js
			require('moe/dummy')
	:comm
		The `moeDummy` module makes Node possible to load `.moe` files as well as `.js`. Everything required is a `require`.


:section{Overview}
	|smoe
		def max(list):
			var m = list[0]
			for(var i in 0..list.length)
				if(list[i] > m) m = list[i]
			return m
		trace max [5, 4, 3, 2, 1]
	:comm
		First, whitespaces play an important role in Moe, indents means structure for example. There is nothing works like `end` or `{}` in other languages. It is not required to use semicolons(`;`) to terminate statements (though semiclolns still works as well), and use indentation instead of surrounding statements with curly brackets(`{}`).

	|smoe
		trace \        // backslash-newline means nothing
			1, 2,
			(3 +
			 4
			 + 5)
		var list = [   // open brackets annihilates coming newlines.
			1,
			2,
			3
		]
	:comm
		Newlines are **always** "semicolons", expect appearances **around** some symbols will be ignored so that you could write long expressions or complex literals.
	
	|smoe
		// Newlines inside brackets will be ignored.
		(trace  -- here
			x,
			y,
			z)
		var actions = { if(true) trace "OK"
		              ; else trace "Panic"
		              ; while(false) do { trace "What"
		                                ; trace "Happened?"}
		              }
	:comm
		Like python, line breaks **inside** parentheses **will** be ignored. 

		As what you seen, `//` and `--` leads comments.

	|smoe
		// Strings here
		"This is a string. [\n] <- Newline here. \u4e00"
		'This is a single quoted string. \no backslashes. '' <- single quote here.'
		'''
			Multiple
			Line
			Strings.'''
	:comm
		Single quoted string have changed into a much simpler form. Backslashes in single-quoteds is not an escape character now. Double the quote sign to express the quote sumbol (`'`) itself.

		You can also use Python-style multiple-line strings. Also, no escapes.
	|smoe
		0xCAFE9527
		1
		1.5
		1.5e5
		1.5e-5
	:comm
		Parts of numbers in Moe cannot be omitted, so that `.5` is not a valid number.

:section{Variables (and immutable ones)}
	|smoe
		var outer = 1
		var x = 2
		def f = function():
			var inner = 3
			outer = 4
			var x = 5
			trace inner  -- 3
			trace outer  -- 4
			trace x      -- 5
		f()
		trace outer      -- 4
		trace x          -- 2
	:comm
		Variables in Moe is defined by `var` or `def`. "Variables" defined by `def` is actually a constant, which means it is impossible make any assignment to it. Scopes rule is exactly same as JavaScript, `var` and `def` **shadows** external variables.

		`def` can only define one thing once, with `var` can declares multiple variables without initialization. However, you are able to use `def` for defining properties, which is useful processing objects. In this situation, `def` is only a simple assignment.
		|moe
			def Number.prototype.times = function(f):
				for(var i in 0..this) f(i)

:section{Operators}
	Operators in Moescript are **all** binary, with the priority listed below:

	:table{id="tbl-operators"}
		:defColClasses{numerial indexing}{}{}
		:thr{Priority}{Operation}{Associativity}
		:tr{14}{Omissioned calls}{----}
		:tr{13}{`*   /   %`}{Left}
		:tr{12}{`+   -`}{Left}
		:tr{11}{`<   >   <=  >=`}{Non-associative}
		:tr{10}{`is`}{Left}
		:tr{9}{`==  !=  =~  !~  === !==`}{Non-associative}
		:tr{8}{`and &&`}{Left}
		:tr{7}{`or  ||`}{Left}
		:tr{6}{`..  ...`}{Left}
		:tr{5}{`as`}{Left}
		:tr{4}{Pipe calls}{----}
		:tr{3}{`when` clauses}{----}
		:tr{2}{`where` clauses}{----}
		:tr{1}{Assignments}{----}

	Most opeators are left-associative, except assignments are right-associative and boolean operators are non-associative.

	`==` and `===` has the same meaning in Moe, which is strict equality test. The mignt-be-harmful non-strict equal(`==`) in JavaScript is `=~` in Moe.

	The behavior of `is` and `as` operator is customizable. `x is y` means `y.be x` while `x as y` means `y.convertFrom x`. As a syntax sugar, `x is in y`, or actually `x is in(y)`, means `y.contains(x)`.

	Operators could be **wrapped** into functions directly by using `(op)`. `(+)(x, y)` means `x + y` while `(+)(x)` means `(y) => x + y`.

	Two of the arguments, `(+)` and `(-)` could be used as "unary operators" in the form `(- x)`. Though `!` is not an operator, `(! x)` actually works as `(not x)` where `not` is a keyword function.

:section{Flow control}
	|smoe
		if(true == true)
			trace "We are OK!"
		else if(true != true) trace "Panic"
		else
			trace "The world is crazy!"
			trace "Really crazy!"

		// e1 when(cond), e2 means (cond ? e1 : e2)
		def absolute(x) = 
			negate x when(x < 0),
			x

		def gpa(score) = piecewise
		    when(score >= 100) 5
			when(score >= 90)  4
			when(score >= 85)  3.5
			when(score >= 80)  3
			when(score >= 70)  2
			when(score >= 60)  1
			otherwise          0

		def grade(score) = case(gpa score)
		    when(5)            "Perfect!"
			when(4)            "Excillent!"
			when(3.5)          "Pretty good!"
			when(3)            "Good!"
			when(2)            "OK!"
			when(1) when(0)    "Cheer up!"
			otherwise          throw "Score Error!"
	:comm
		Conditionals.
	
	|smoe
		for(var x, i in enumerable)
			action(x, i)

		for(var *terms in enumerable)
			action(terms) 
			-- terms is an array containing all items yield from enumerator
	:comm
		For statement. `for(x, i in range) body` means:
		|moe
			var enumerator = range.getEnumerator()
			while(terms = range())
				x = terms[0]
				i = terms[1]
				body

		`for(*terms in range) body` means:
		|moe
			var enumerator = range.getEnumerator()
			while(terms = range())
				body

		`for(var x in low..high)` means `for(var x = low; x < high; x++)` in Javascript. `for(var x in low...high)` means `for(var x = low; x <= high; x++)`.

	|smoe
		while(condition)
			action

		repeat
			action
		until(condition)
	:comm
		`while` and `repeat-until`.
	
	|smoe
		label out: for(var x in 1..55)
			for(var y in x..55)
				if(x + y == 42)
					break out
	:comm
		Break and labels. You can `break` loops only while only loops could be labelled.

:section{Objects}
	|smoe
		-- A game config
		def gameConfig = [
			player: [
				name: "tom",
				type: Human,
				level: 1,
				weapon: sword,
				inventory: [food, food, potion, bomb]
			],
			enemy: [
				name: "Dragon",
				type: Dragon,
				level: 9
			]
		]

		// some lisp code
		def code = ['define', ['fib', 'n'],
			['cond',
			  [ [['=', 'n', '1'], '1'],
				[['=', 'n', '2'], '1'],
				['()', 
					['+', ['fib', ['-', 'n', '1']],
						['fib', ['-', 'n', '2']]]]]]]
	:comm
		Both object literals and array literals uses `[]`. Therefore, expressing empty objects should use `[:]` while `[]` means empty array. 
	
	|smoe
		def actions = [
			if: ((cond, fThen, fElse) => fThen() when(cond), fElse()),
			"while": ((fCond, fBody) => while(fCond()) fBody())
		]
	:comm
		Keywords can appear inside object literals without quoting.

	|smoe
		-- function object: creates object using a constructor with an optional prototype.
		-- object(oPrototype, fConstruct) <- Derives(oPrototype)
		-- object(fConstruct) <- Object

		def gameConfig = object =>
			@player = object =>
				@name = "tom"
				@type = Human
				@level = 1
				@weapon = sword
				@inventory = [food, food, potion, bomb]
			@enemy = object =>
				@name = "Dragon"
				@type = Dragon
				@level = 9
	:comm
		You can also use `object` function provided in standard libary for large objects, especially configs.

	|smoe
		def type Man(name):
			this.name = name
		def Man::speak(something): // Man.prototype.speak
			trace something

		def outof(Man) Child(name):
			resend Man(name) // Man.call this, name
		def Child::speak(something):
			trace "Ah!"
			resend Man::speak(something) // Man.prototype.speak.call this, something

		var tom = new Child "Tom"
		tom.speak "Thanks!"
	:comm
		To define classes, use `type` and `outof`. `outof(TParent)(fCtor)` creates inherited classes. You can access properties of `prototype` by `::`. Call super methods via `resend`, where `resend f(args)` is equalivent to `f.call(this, args)`.

:section{Functions}
	|smoe
		// Define a simple function
		-- function square: calculate square of a number
		-- square(x <- Number) <- Number
		def square(x) = x * x
	:comm
		To define a simple function, you can write `def functionName(argList) = result` simply.
	
	|smoe
		// A procedure.
		-- function printPrimes: print all prime numbers 
		--  not greater than an uplimit specified
		-- printPrimes(uplimit <- Number)
		def printPrimes(uplimit):
			def primes = [2, 3, 5, 7]
			for(var n in 2 ... uplimit)
				var composite = false
				var t = 0
				while(square primes[t] <= n)
					if(n % primes[t] == 0)
						composite = true
						break
					t += 1
				if(not composite)
					primes.push n
					trace n

		def outNum(x): trace (x - 0)
	:comm
		To define a more complicated function, use colon and indents.

	|smoe
		def Y(g) =
			def rec(x)(y) = g(x(x)) y
			rec(rec)
		def Y1(g):
			def rec(x)(y) = g(x(x)) y
			return rec(rec)		
	:comm
		In Moe, colon-forms requires to write `return` statement explicitly, while functions using equal sign (`=`) does not. Functions indicated by equals will contain automatically generated `return`'s.

	|smoe
		// Parameters with default value
		def fill(container, liquid = "water"):
			trace ("Fill " + container + " with " + liquid)
	:comm
		Parameters can have default values. Specify it by using `=`.
	
	|smoe
		-- function Y: Fixed point combinator
		-- Y(g <- Function) <- Function
		--     which Y(g)(x) = g(Y(g))(x)
		def Y(g) =
			def rec(x)(y) = g(x(x)) y
			rec(rec)
		
		// Define recursive function using Y
		def Y fibonacci(recurse)(n) =
			if(n <= 2) 1
			else recurse(n - 2) + recurse(n - 1)
		
		fibonacci(5) // 5

	:comm
		A slightly complicated example. `Y` is the fixed point combinator, and `def Y f(args)...` means `def f = Y function(args)...`. In this example, `fibonacci` is actually:

		|moe
			def fibonacci_1 = function(recurse):
				return function(n):
					return 1 when(n <= 2),
					recurse(n - 2) + recurse(n - 1)
			def fibonacci = Y(fibonacci_1)
	
	|smoe
		def fibonacci = function(n)=
			1 when(n <= 2),
			fibonacci(n - 2) + fibonacci(n - 1)
	:comm
		No-name functions can be defined using `function` keyword, followed by argument lists, a colon or an equal sign, then the function body. Like functions in `def`, `=` for automatic generated `return`s, `:` for manual.
	
	|smoe
		list.map (term, index) => term * index
		$(element).bind "click", (event) :>
			trace event

		def sleep(dt, f) = setTimeout(f, dt)
		sleep 1000, :>
			trace 'Blah!'
		// Note: different from (act) :> something
		act :> something
	:comm
		You can also define a function using **lambda expressions**, by using an optional list of parameters, an arrow(`:>` or `=>`), and the function body. Unindented Lambdas will extend all the way to the right as long aspossible. The colon-equal rule still rules here.

	|smoe
		def repeatWhile(condition, body):
			var c
			while((c = condition()))
				body(c)

		var num = 10
		repeatWhile {num -= 1}, {|j| trace j}
	:comm
		The last way is to use curly brackets (`{}`) enclose statements, separated by explicit semicolons, not line breaks. `return`'s will be automatically generated. Arguments are writtern inside the brackets, and wrapped by `|`'s, when necessary.

:section{`where` clause}
	|smoe
		def math = [square: square, cube: cube]
		where square(x) = x * x
		      cube(x) = square x * x
	:comm
		The `where` clause in Moescript provided a convient way to create "modules". The code above acts actually
		|moe
			def math = do =>
				def square(x) = x * x
				def cube(x) = square x * x
				[square: square, cube: cube]

:section{Calling functions}
	|smoe
		def f(x, y, z) = x * y + z
		f(1, 1, 1) // 2

		def act(f) = f()
		act{trace 'blah!'} // short for act({trace 'blah!'})
	:comm
		Call function by `f(args)`. There **should not be any space** between the function and the bracket `(`.

		`f({func})` could be simplified into `f{func}`.
	
	|smoe
		def f(config) = config.a + config.b
		f(a: 1, b: 2) // 3
	:comm
		You can use named arguments. All named arguments will be accumulated into an object literal passed into the function as the last argument.

	|smoe
		f g h a, b, c   // = f(g(h(a, b, v)))
		x y z w         // = x(y(z(w)))
		f               // = f; No invocation.
		square x * x    // = square(x) * x; Not square(x * x)
	:comm
		Brackets can be omitted when it is not aminigous. Omissioned calls has a lower priority than calls using brackets, but higher than operators. Therefore, `square x * x` means `square(x) * x`.
	
	|smoe
		def tap(value, f) = seq f(value), value
		5 |tap {|x| trace x}              // 5
		  |{|x| x * 3}
		  |tap {|x| trace x}              // 15
	:comm
		Moe supports a special calling method, by using "Pipe sign" `|`, which has an extremely low priority. The calling form `a |f b, c, d` means `f(a, b, c, d)`, or more strictly, `seq T = a, f(T, b, c, d)` due to `a` will be evaluated **before** `f`. `a |f` means `f(a)`, with reversed evaluation order, `a` before `f`.

	|smoe
		$ "selector"
		  |.addClass "selected"
		  |.css background: "red"
	:comm
		Chain calls, usually used in JavaScript, is supported by a slightly modified pipe `|.`. Add the method name after the pipe-dot sign. Both pipe forms can be combined in any order.

	
	:section{Call wrappers}
		There are some special keywords, which can be "called" like normal function in Moe, called Call Wrappers, used to generate special codes, including object creation, prototype resending, or create "wait" calls used by asynchronous functions. All call wrappers are "called" in compile time, accepts only one argument, with some of them only accepts an invocation expression as its argument.

		|smoe
			def Point(x, y):
				this.x = x
				this.y = y

			def origin = new Point 0, 0
		:comm
			Creating objects using `new`.

		|smoe
			def Animal::eat(food):
				trace "I eat " + food
			def Dog::eat(food): piecewise
				when(food == meat) resend Animal::eat(food)
				otherwise          trace "Yucky!"
		:comm
			`resend`, followed with a function call, is used to call methods with `this` bound to `this` of current scope. `resend method(args)` stands for `method.call(this, args)`.

		|smoe
			def composite(f, g)() = f(do(g))

			def x2m1p = composite (+)(1), (*)(2)		
		:comm
			`(do f)` means `(f.apply(this, arguments))`. It is usually used in metaprogramming.
		
		|smoe
			def f() = process wait loadResource(something)
		:comm
			`wait` is a special call wrapper related to the monadic primitive system, dealing with callbacks, see section "Coping with Callbacks".

:section{Coping with Callbacks}
	|smoe
		-- A function using `wait`...
		def f() = process wait loadResource(something)

		-- ...will make f into
		def f_1 = [build: fBuild]
		where fBuild(schemata)()():
			return schemata.yield loadResource something, (resource) :>
				return schemata.return process resource
	:comm
		The call wrapper `wait` is used for generate callback-requiring methods. A simplified form of `wait f(args)` is `f!(args)`.

		A function containing `wait`, `!` or `<-` (called **Bind Arrow**) will be transformed into a completely different thing called **Monadic Primitive**. A monadic primitive has the form `[build: function(schemata)(args)()...]`.

		In the original form of monadic primitives, `schemata` is an object with several methods, including `yield`, `bind` and `return`. Some uses of monadic primitive, including generators and list comprehension, requires this. `args` is the argument list, and the 3rd group of brackets starts the actions.

		Moe compiler will transform `f! args` into `schemata.yield f args, (_) => rest` where `rest` stands for the rest actions. The bind arrow, `x <- val`, will be transformed into `schemata.bind val, (x) => rest`. So that `schemata` is a key object in monad construction. It represents the type of monads.

	|smoe
		def async randPrintNums(n):
			def tasks = []
			for(var i in 0..n)
				tasks.push async :>
					wait sleep (100 * Math.random())
					trace index
				where index = i
			wait join tasks

		randPrintNums 100
	:comm
		However, raw primitives is hard to use, so that monadic primitives is often wrapped by library functions. A useful function is `async` from `moe/libs/async`, dealing with most of the callback-requiring actions in JavaScript.

	|smoe
		def enumeration String::getEnumerator():
			for(var i in 0..this.length)
				enumeration.yield! this.charAt(i), i

		for(var x in "this is a string")
			trace x
	:comm
		Another useful function is `enumeration`, creating iterators.

	|smoe
		def Enumerable twiceRange(range):
			for(var *x in range)
				() <- x
			for(var *x in range)
				() <- x

		for(var x in twiceRange(1..10))
			trace x
	:comm
		`Enumerable` is a wrap of `enumeration`, creates enumerable object constructors.

	|smoe
		-- Enumerator comprehension monad
		var ecSchemata = [yield: fYield, return: fReturn, bind: fBind]
		where 
			fReturn = Enumerable function(x):
				if(x != undefined)
					enumeration.yield! x
			fYield(x) = x
			fBind = Enumerable function(list, callback):
				for(var x in list) 
					for(var y in callback x)
						enumeration.yield! y

		var mktable(G) =
			var f = G.build ecSchemata
			f.apply(this, arguments)()

		// simple usage
		for(var item in mktable {var x <- (1..100); x * 2 + 1}) trace item
		
		// complicated usage
		var t = mktable {var x <- (1...9); var y <- (x...9); x + ' * ' + y + ' = ' + x * y }
		// t = mktable [build: fBuild]
		// where fBuild(schemata)()() =
		//     schemata.bind (1...9), (x) =>
		//         schemata.bind (x...9), (y) =>
		//             schemata.return (x + ' * ' + y + ' = ' + x * y)
		for(var item in t) trace item
	:comm
		Even more interesting things could be implemented by monadic primitives, due to it is actually an abstraction of flow control. In some situation, callbacks are not called only once, produces "strange" behaviors, for example, enumerator comprehension.

		Actually there is a builtin function named `table` in `moe/libs/std`, generates arrays.

:section{Links}
	 - Moescript: \githubProject
	 - Library: \page{lib}